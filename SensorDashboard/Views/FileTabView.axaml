<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="using:SensorDashboard.ViewModels"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:local="using:SensorDashboard"
             xmlns:views="clr-namespace:SensorDashboard.Views"
             mc:Ignorable="d" d:DesignWidth="500" d:DesignHeight="450"
             x:Class="SensorDashboard.Views.FileTabView"
             x:DataType="vm:FileTabViewModel"
             x:CompileBindings="True"
             x:Name="ThisFileTabView">

    <UserControl.Resources>
        <local:DataGridCellColorMultiConverter x:Key="DataGridCellColorMultiConverter" />
    </UserControl.Resources>

    <UserControl.Styles>

        <Style Selector="Grid > NumericUpDown, Grid > ui|NumberBox, Grid > Label">
            <!-- Apply same margin value to all direct-child text boxes. -->
            <Setter Property="Margin" Value="8 4" />
        </Style>

        <Style Selector="Grid > NumericUpDown, Grid > ui|NumberBox, DataGridCell">
            <!-- Use tabular figures for numerical inputs so text width
                 doesn't change as value changes. -->
            <Setter Property="FontFeatures">
                <FontFeatureCollection>
                    <FontFeature Tag="tnum" Value="1" />
                </FontFeatureCollection>
            </Setter>
        </Style>

        <Style Selector="Grid > :is(Control)">
            <!-- Vertically centre all Grid child controls. -->
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style Selector="DataGridCell">
            <Setter Property="Padding" Value="0" />
        </Style>

        <!-- DataGrid cells and their content are updated separately,
             meaning that the selector needs to target the inner
             TextBlock instead of the DataGridCell itself. -->
        <Style Selector="DataGridCell TextBlock">
            <Setter Property="Background">
                <!-- Use a multi-binding so changes to either the grid cell
                     content, min or max values will trigger style update. -->
                <MultiBinding Converter="{StaticResource DataGridCellColorMultiConverter}">
                    <Binding Path="((vm:FileTabViewModel)DataContext).ThresholdMinimum"
                             FallbackValue="0"
                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=views:FileTabView}" />
                    <Binding Path="((vm:FileTabViewModel)DataContext).ThresholdMaximum"
                             FallbackValue="100"
                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=views:FileTabView}" />
                    <Binding RelativeSource="{RelativeSource Self}"
                             Path="Text" />
                </MultiBinding>
            </Setter>
            <Setter Property="Foreground" Value="White" />

            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="TextAlignment" Value="Center" />
        </Style>

    </UserControl.Styles>

    <Grid RowDefinitions="Auto, *"
          Margin="8">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" MinWidth="150" MaxWidth="300" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>

        <ui:CommandBar Grid.Column="0"
                       Grid.Row="0"
                       Grid.ColumnSpan="2"
                       DefaultLabelPosition="Right"
                       Margin="0 0 0 8">

            <ui:CommandBar.PrimaryCommands>

                <ui:CommandBarButton
                    Label="Open"
                    IconSource="Folder"
                    Click="OpenFileButton_OnClick" />

                <ui:CommandBarButton
                    Label="Save"
                    IconSource="Save"
                    Click="SaveFileButton_OnClick" />

            </ui:CommandBar.PrimaryCommands>

            <ui:CommandBar.SecondaryCommands>

                <ui:CommandBarButton
                    Label="Open Sample Data"
                    IconSource="List"
                    Click="OpenSampleDataButton_OnClick" />

                <ui:CommandBarButton
                    Label="Show Hot Keys"
                    IconSource="Keyboard"
                    Click="ShowHotKeysButton_OnClick" />

            </ui:CommandBar.SecondaryCommands>

        </ui:CommandBar>

        <Grid ColumnDefinitions="*"
              RowDefinitions="Auto, Auto, Auto, Auto, Auto, Auto, Auto, Auto"
              Grid.Column="0"
              Grid.Row="1"
              VerticalAlignment="Top"
              Margin="0 8 0 0 ">

            <Label Grid.Column="0" Grid.Row="0" Content="Total average:" />
            <NumericUpDown Grid.Column="0"
                           Grid.Row="1"
                           IsReadOnly="True"
                           FormatString="0.00"
                           ShowButtonSpinner="False"
                           Focusable="False"
                           Value="{Binding AverageTotal}" />

            <Label Grid.Column="0" Grid.Row="2" Content="Row average:" />
            <NumericUpDown Grid.Column="0"
                           Grid.Row="3"
                           IsReadOnly="True"
                           FormatString="0.00"
                           ShowButtonSpinner="False"
                           Focusable="False"
                           Value="{Binding AverageRow, TargetNullValue=0}" />

            <Label Grid.Column="0" Grid.Row="4" Content="Threshold min:" />
            <ui:NumberBox Grid.Column="0"
                          Grid.Row="5"
                          AcceptsExpression="True"
                          HorizontalAlignment="Stretch"
                          SpinButtonPlacementMode="Inline"
                          Value="{Binding ThresholdMinimum}"
                          Maximum="{Binding ThresholdMaximum}" />

            <Label Grid.Column="0" Grid.Row="6" Content="Threshold max:" />
            <ui:NumberBox Grid.Column="0"
                          Grid.Row="7"
                          AcceptsExpression="True"
                          HorizontalAlignment="Stretch"
                          SpinButtonPlacementMode="Inline"
                          Value="{Binding ThresholdMaximum}"
                          Minimum="{Binding ThresholdMinimum} " />

        </Grid>

        <Border Grid.Row="1"
                Grid.Column="1"
                CornerRadius="8"
                VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch"
                Margin="8 0 0 0"
                BoxShadow="{DynamicResource DataGridShadow}">

            <Border CornerRadius="{Binding $parent.CornerRadius}"
                    ClipToBounds="True"
                    VerticalAlignment="Stretch"
                    HorizontalAlignment="Stretch">

                <DataGrid x:Name="DataGridDisplay"
                          ItemsSource="{Binding DataGridSource}"
                          GridLinesVisibility="All"
                          AutoGenerateColumns="False"
                          IsReadOnly="True"
                          CanUserSortColumns="False"
                          SelectedIndex="{Binding DataGridSelectedIndex}" />
            </Border>

        </Border>

    </Grid>

</UserControl>
